---
title: "Main analysis of chapter three"
author: 
  - name: Ryan Leadbetter
    affiliation: 
      - ref: CTMTDS
affiliations:
    - id: CTMTDS
      name: Centre for Transforming Maintenance through Data Science, Curtin University
date: "`r Sys.Date()`"
number-sections: true
bibliography: ../../references.bib
format:
  html:
    embed-resources: true
    toc: true
    theme: 
      light: flatly
editor: visual
execute: 
  cache: false
  message: false 
  warning: false
  error: false
  fig-width: 10
  fig-height: 10
css: ../styles.css
title-block-banner: "#FFFFFF"
title-block-banner-color: "#000000"
---

```{r}
#| label: set-up-chunk
#| code-fold: true
#| code-summary: "Show setup chunk"
library(dplyr)
library(ggplot2)
library(ggdist)
library(cowplot)
library(rstan)
library(posterior)
library(tidybayes)
library(bayesplot)
library(kableExtra)
library(lubridate)
library(tidyverse)

rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())

fig_path <- file.path(
  "..",
  "..",
  "figures",
  "ch-3"
)
tbl_path <- file.path(
  "..",
  "..",
  "tables",
  "ch-3"
)
```

```{r}
#| label: define-functions
#| code-fold: true
#| code-summary: "Show runctions chunk"
# Function to sample from a truncated normal distribution
rTruncNorm <- function(n, mean, sd, lb = NULL, ub = NULL) {
  # Check if lower bound is supplied & 
  # calculate lower bound of uniform dist
  if (!is.null(lb)) {
    lb_unif <- pnorm((lb - mean) / sd)
  } else {
    lb_unif <- 0
  }
  if (!is.null(ub)) {
    ub_unif <- pnorm((ub - mean) / sd)
  } else {
    ub_unif <- 1
  }
  # Sample from uniform distribution
  unif_rv <- runif(n, lb_unif, ub_unif)
  # Probability integral transformation
  norm_rv <- (qnorm(unif_rv) * sd) + mean
  
  return(norm_rv)
}
# function used to calculate weibull draws in joint prior
fn <- function(x) {
  log(-log(1 - x))
}
```

This markdown contains the code to reproduce the main analysis in Chap. 3. Here, I analyse the idler-frame failure time data from an overland iron ore conveyor. The first five rows of the data are shown in @tbl-load-data.

```{r}
#| label: tbl-load-data
#| tbl-cap: The first five rows of the idler frame failures dataset.
idler_data <- readRDS(
  file.path("..", "..", "data", "idler_frame_life_example.RDS")
)
# add missing lifetime
idler_data <- rbind(
  idler_data,
  data.frame(
    start = ymd("2020-11-15"),
    end = ymd("2021-01-11"),
    censored_at_start = FALSE,
    censored_at_end = TRUE,
    lifetime = ymd("2021-01-11") - ymd("2020-11-15"),
    frame_number = "78"
  )
)
head(idler_data) %>%
  kbl() %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
```

The dataset contains the replacemens records of idlers-frames on an iron ore conveyor over the past six years. The plant (conveyor) has been in opperation for twenty years but replacements have only been reliably recorded at the frame level for the past six. @tbl-data gives a description of the dataset. @fig-frame-lifetimes plots the lifetimes of each frame along the length of the conveyor. The frames number is on the horizontal axis and the value of the lifetimes is on the vertical.

```{r}
#| label: tbl-data
#| tbl-cap: Summary of the idler-frame dataset.
summary_df <- data.frame(
  `Maximum lifetime` = max(idler_data$lifetime),
  `Minimum lifetime` = min(idler_data$lifetime),
  `Maximum fully observed lifetime` = idler_data %>%
    filter(!(censored_at_start | censored_at_end)) %>%
    pull(lifetime) %>%
    max(),
  `Beginning of observation` = min(idler_data$start),
  `End of observation` = max(idler_data$start),
  `Number of observations` = idler_data %>%
    nrow(),
  `Number of unique frames` = idler_data %>%
    pull(frame_number) %>%
    unique() %>%
    length(),
  `Number of left truncated observations` = idler_data %>%
    filter(censored_at_start) %>%
    nrow(),
  `Number of right censored observations` = idler_data %>%
    filter(censored_at_end) %>%
    nrow(),
  `Number of left truncated and right censored observations` = idler_data %>%
    filter((censored_at_end & censored_at_start)) %>%
    nrow(),
  check.names = FALSE
) %>%
t()

summary_df %>%
  kbl() %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
```

```{r}
#| label: save-tbl-data
#| echo: false
#| output: false
summary_df %>%
  kbl(
    booktabs = T,
    format = "latex",
    caption = "Summary of the idler frame data set.",
    escape = FALSE,
    label = "idler-frame-summary"
  ) %>%
  kable_styling(latex_options = "striped") %>%
  save_kable(
    file = file.path(
      tbl_path,
      "data_summary.tex"
    ),
    keep_tex = TRUE
  )
```

```{r}
#| label: fig-frame-lifetimes
#| fig-cap: The idler frame lifetimes. The frame number that the lifetime belongs to is on the horizontal axes and the log lifetime is plotted on the virtical axis. Fully observed lifetimes are shown in red while the lifetimes that are only partialy observed are shown in blue. Those lifetimes that are also left-truncated are indicated by tryangles.
#| echo: false
p_idler_lifetimes <- idler_data %>%
  mutate(
    frame_number = as.numeric(frame_number),
    censored = ((censored_at_start + censored_at_end) > 0),
    log_lifetime = log(as.numeric(lifetime))
  ) %>%
  ggplot(
    aes(
      x = frame_number,
      y = log_lifetime,
      col = censored,
    shape = censored_at_start)
  ) +
  geom_point() +
  theme_minimal() +
  theme(
    legend.position = "none",
    plot.margin = margin(1, 1, 1, 1, "cm")
  ) +
  xlab("frame number") +
  ylab("lifetime (log(days))")
p_idler_lifetimes
```

```{r}
#| label: save-fig-frame-lifetimes
#| echo: false
#| output: false
pdf(
  file.path(fig_path, "idler-frame-data.pdf"),
  height = 6,
  width = 12
)
p_idler_lifetimes
dev.off()
```

In @fig-frame-lifetimes, the red points are fully observed lifetimes (i.e. where we observed the instalation and failure of the idlers in the frame), whereas blue points are partialy observed lifetimes (where either the instalation, failure time, or both are unknown). The triangular blue points are points where the isntalation of the frame is unknown. As discussed in the main chapter, a conventional way of dealing with these left-truncated lifetimes with unknown exposure history is to simply discard them. If we were to discard the left-truncated samples in this dataset then we would be throwing away 35.7% of the data.

There are a few fully observed lifetimes that are very short (less than three weeks);

```{r}
#| label: early-failures
idler_data %>%
  filter(
    !(censored_at_start | censored_at_end),
    lifetime < (7 * 3)
  )
```

These 25 failures may be a result of manufactureing defects or incorrect installation, which is not the failure mode that I want to analyse here. Therefore, following the approach of @hong2009, I treat these observations as a case of right censoring (i.e. their failure due to wear was right censored by their failure from another cause).

# Constructing an informative prior

We know that the average lifetime is around five years, and that almost all idlers should have failed by eight (0.99). I encode this information into a joint prior--using the method I describe in Chapter 2--by specifying the elicitation times at five and eight years and the expectation(standard deviation) of the CDF at these times as 0.5(sd 0.15) and 0.99(sd 0.05) respectively. The resulting informative prior is shown in @fig-informative-prior.

```{r}
#| label: fig-informative-prior
#| fig-cap: "The informative joint prior that results from encoding x, y, and z."
#| fig-subcap: 
#|   - "The joint draws of the shape and scale."
#|   - "The resulting uncertainty in the CDF."
#| layout-ncol: 2
#| echo: false
set.seed(956)
# specify prior information
t_1 <- 5 * 365
f_1 <- 0.50
sd_1 <- 0.15
t_2 <- (5 + 3) * 365
f_2 <- 0.99
sd_2 <- 0.05
# parameters related to plotting
n_draws <- 3000
x_range <- c(0, 10 * 365)
res <- 10
# sample values of cdf
samp_t1 <- rTruncNorm(
  n = n_draws,
  mean = f_1, sd = sd_1,
  lb = 0, ub = 1
)
samp_t2 <- rTruncNorm(
  n = n_draws,
  mean = f_2, sd = sd_2,
  lb = samp_t1, ub = 1
)
# calculate Weibull parameters
beta_sample <- (fn(samp_t2) - fn(samp_t1)) / log(t_2 / t_1)
eta_sample <- exp(log(t_1) - (fn(samp_t1) / beta_sample))
# create plot of joint dist
cdf_grid <- seq(x_range[1], x_range[2], by = res)
p_joint <- data.frame(
  beta = beta_sample,
  eta = eta_sample
) %>%
  ggplot() +
  geom_point(
    aes(x = beta_sample, y = eta_sample)
  ) +
  xlim(0, 10) +
  ylim(0, 3000) +
  xlab(expression(beta)) +
  ylab(expression(eta)) +
  theme_minimal()
# create plot of cdf
p_cdf <- data.frame(
  draw = rep(1:n_draws, each = length(cdf_grid)),
  t = rep(cdf_grid, n_draws)
) %>%
  mutate(
    cdf = pweibull(t, beta_sample[draw], eta_sample[draw])
  ) %>%
  ggplot() +
  stat_lineribbon(
    aes(x = t, y = cdf),
    .width = c(0.5, 0.9)
  ) +
  scale_fill_brewer() +
  theme_minimal() +
  theme(legend.position = "none")
# plot
p_joint
p_cdf
```

```{r}
#| label: save-fig-informative-prior
#| echo: false
#| output: false
pdf(
  file.path(fig_path, "idler-frame-prior.pdf"),
  height = 5,
  width = 10
)
plot_grid(
  p_joint,
  p_cdf,
  nrow = 1,
  ncol = 2,
  labels = c(
    "(a)", "(b)"
  ),
  label_fontfamily = "Times",
  label_face = "plain"
)
dev.off()
```

# Fitting the model in Stan

In this section I fit the Stan model for imputing partialy observed lifetimes and missing truncation times from Chapter 2 to the idler-frame data. I define the model and then prepare the data for stan. Since the conveyor has been in operation for 21 years I set t_start to 15.
Given that the t_start is fifteen years.

```{r}
#| label: define-stan-model
stan_model_unknown_lt_rc_inf <- stan_model(
  model_code = "
functions {
// function to simplify the calculation of eta and beta
real fn(real tCDF) {
  return log(-log1m(tCDF));
}
}
data {
int N_obs;                             # N fully observed lives
int N_rc;                              # N right censored only lives
int N_lt;                              # N left truncated only lives
int N_lt_rc;                           # N right cens and left trunc lives
array[N_obs] real<lower=0> y_obs;      # Fully observed lifetimes
array[N_rc] real<lower=0> y_rc;        # Right censored lifetimes
array[N_lt] real<lower=0> y_lt;        # Left trunc lifetimes
array[N_lt_rc] real<lower=0> y_lt_rc;  # right cens and left trunc lifetimes
real<lower=0> t_start;                 # start of the observation window
// Define the prior
real t_1;
real t_2;
real t1_mean;
real t1_var;
real t2_mean;
real t2_var;
}
transformed data{
array[N_lt] real<lower=0> y_lt_upper;  # The upper bound of the left trunc lives

for (m in 1:N_lt){
  y_lt_upper[m] = y_lt[m] + t_start;   # Upper bound = lower bound + start of observation
}

}
parameters {
real<lower = 0, upper = 1> t1CDF;
real<lower = t1CDF, upper = 1> t2CDF;
array[N_rc] real<lower=y_rc> y_rc_hat;   # imputed right censored values
array[N_lt] real<lower=y_lt, upper=y_lt_upper> y_lt_hat;  # imputed left trunc values
array[N_lt_rc] real<lower=y_lt_rc> y_lt_rc_hat;   # imputed left trunc and right cens values
array[N_lt_rc] real<lower=0, upper=1> t_lt_rc_st; # imputed left truncation times for left trunc and right cens values (standardised)
}
transformed parameters{
real<lower = 0> beta;
real<lower = 0> eta;
array[N_lt] real t_lt;  # imputed left trunc times for left trunc values
array[N_lt_rc] real<lower=0, upper=t_start> t_lt_rc_upper;
array[N_lt_rc] real<lower=0, upper=t_lt_rc_upper> t_lt_rc;  # imputed left trunc times for left trunc and right cens values

// calculate Weibull paramaters based on the
// draws from the CDF at t1 and t2.
beta = (fn(t2CDF) - fn(t1CDF)) / log(t_2 / t_1);
eta = exp(log(t_1) - (fn(t1CDF) / beta));

for (i in 1:N_lt) {
  t_lt[i] = y_lt_hat[i] - y_lt[i];
}

for (k in 1:N_lt_rc){
  if ((y_lt_rc_hat[k] - y_lt_rc[k]) < t_start)
    t_lt_rc_upper[k] = y_lt_rc_hat[k] - y_lt_rc[k];
  else
    t_lt_rc_upper[k] = t_start;

  t_lt_rc[k] = t_lt_rc_st[k] * t_lt_rc_upper[k];
}
}
model{
// Data model
// fully observed lifetimes
y_obs ~ weibull(beta, eta);
// right censored lifetimes
y_rc_hat ~ weibull(beta, eta);
// left truncated lifetimes
for (i in 1:N_lt) {
  y_lt_hat[i] ~ weibull(beta, eta) T[t_lt[i], ]; 
}
// left truncated and right censored lifetimes
for (j in 1:N_lt_rc) {
  y_lt_rc_hat[j] ~ weibull(beta, eta) T[t_lt_rc[j], ]; 
}

// Prior model
t1CDF ~ normal(t1_mean, t1_var);
t2CDF ~ normal(t2_mean, t2_var);
t_lt_rc_st ~ uniform(0, 1);
}

"
)
```

Before sampling, I prepare the data to pass to Stan.

```{r}
#| label: prepare-stan-data
df_obs <- idler_data %>%
  filter(lifetime > (3 * 7)) %>%
  filter(!(censored_at_start | censored_at_end))
df_rc <- idler_data %>%
  filter((!censored_at_start & censored_at_end) | 
    ((lifetime < (3 * 7)) & !(censored_at_start | censored_at_end)))
df_lt <- idler_data %>%
  filter((censored_at_start & !censored_at_end))
df_lt_rc <- idler_data %>%
  filter((censored_at_start & censored_at_end))
idler_frame_stan_data <- list(
  N_obs = nrow(df_obs),
  N_rc = nrow(df_rc),
  N_lt = nrow(df_lt),
  N_lt_rc = nrow(df_lt_rc),
  y_obs = array(df_obs$lifetime),
  y_rc = array(df_rc$lifetime),
  y_lt = array(df_lt$lifetime),
  y_lt_rc = array(df_lt_rc$lifetime),
  t_start = 15 * 365
)
```

To sample draws from the posterior I use 4 chains each 2000 draws long and with a burn in of 500 iterations and no thinning.

```{r}
#| label: sample-from-posterior
idler_stan_fit <- sampling(
  stan_model_unknown_lt_rc_inf,
  c(
    idler_frame_stan_data,
    t_1 = 5 * 365,
    t_2 = (5 + 3) * 365,
    t1_mean = 0.5,
    t1_var = 0.15,
    t2_mean = 0.99,
    t2_var = 0.05
  ),
  chains = 4,
  cores = 4,
  iter = 2000,
  warmup = 500,
  seed = 246
)
```

@tbl-stan-summary summarises the draws of the parameters from the posterior. The chain diagnostics appear reasonable since there were no divergencies flagged during sampling and in @tbl-stan-summary the $\hat{R}$ values are close to $\approx 1$ and $n_{\text{eff}}$ is large for both parameters.

```{r}
#| label: tbl-stan-summary
#| tbl-cap: Summary of sampling and joint posterior of beta and eta.
#| echo: false
rownames_to_column(
  as.data.frame(
    summary(
      idler_stan_fit,
      pars = c("beta", "eta"),
      probs = c(0.025, 0.5, 0.975)
    )$summary
  ),
  var = "Parameter"
) %>%
  kbl() %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
```

```{r}
#| label: save-stan-summary
#| echo: false
#| output: false
stan_summary <- rownames_to_column(
  as.data.frame(
    summary(
      idler_stan_fit,
      pars = c("beta", "eta"),
      probs = c(0.025, 0.5, 0.975)
    )$summary
  ),
  var = "Parameter"
) %>%
  select(!c(se_mean, sd)) %>%
  mutate(
    Parameter = c("$\\beta$", "$\\eta$"),
    across(c('mean':'97.5%'), ~ round(.x, 2)),
    n_eff = round(n_eff, 0),
    Rhat = round(Rhat, 4)
  ) %>%
  rename(
    Mean = mean,
    `2.5\\%` = `2.5%`,
    `50\\%` = `50%`,
    `97.5\\%` = `97.5%`,
    `$n_{\\small{\\mbox{eff}}}$` = n_eff,
    `$\\hat{R}$` = Rhat
  )
  
stan_summary %>%
  kbl(
    booktabs = T,
    format = "latex",
    caption = "Summary of sampling and joint posterior of $\\beta$ and $\\eta$.",
    escape = FALSE,
    label = "idler-frame-posterior-summary"
  ) %>%
  kable_styling(latex_options = "striped") %>%
  save_kable(
    file = file.path(
      tbl_path,
      "stan-summary.tex"
    ),
    keep_tex = TRUE
  )
```

# The posterior distribution

In @fig-posterior-joint, I plot the posterior draws of the parameters. The left plot shows the posterior draws on their own while the right compares them with the contours of the prior. The posterior sits in the tails of the prior, indicating that there is a slight prior-data conflict.

```{r}
#| label: function-plot-cdf-post
#| code-fold: true
#| code-summary: "Show the code"
PlotPostCDF <- function(stan_fit, x_range = c(0, 5), res = 0.05) {
  grid <- seq(x_range[1], x_range[2], res)
  p_cdf <- stan_fit %>%
    as_draws_df() %>%
    select(beta, eta) %>%
    split(., seq(nrow(.))) %>%
    lapply(
      function(draw) {
        df_CDF <- data.frame(
          q = grid,
          p = pweibull(grid, draw$beta, draw$eta)
        )
        return(df_CDF)
      }
    ) %>%
    bind_rows() %>%
    ggplot() +
    stat_lineribbon(
      aes(x = q, y = p),
      .width = c(0.5, 0.9)
    ) +
    scale_fill_brewer() +
    xlab("t") +
    ylab("cdf") +
    theme_minimal() +
    theme(legend.position = "none")
    return(p_cdf)
}
```

```{r}
#| label: fig-posterior-joint
#| fig-cap: "The joint draws of the shape and scale from the posterior."
#| fig-subcap: 
#|   - "Plotted with the same axis scales as @fig-informative-prior."
#|   - "Zoomed in."
#| layout-ncol: 2
#| echo: false
# create plot of joint dist
p_joint_post <- idler_stan_fit %>%
  mcmc_scatter(pars = c("beta", "eta")) +
  xlim(0, 2) +
  ylim(0, 2000) +
  xlab(expression(beta)) +
  ylab(expression(eta)) +
  theme_minimal()
# create plot of prior post comparison
t_1 <- 5 * 365
f_1 <- 0.50
sd_1 <- 0.15
t_2 <- (5 + 3) * 365
f_2 <- 0.99
sd_2 <- 0.05
# parameters related to plotting
n_draws <- 50000
# sample values of cdf
samp_t1 <- rTruncNorm(
  n = n_draws,
  mean = f_1, sd = sd_1,
  lb = 0, ub = 1
)
samp_t2 <- rTruncNorm(
  n = n_draws,
  mean = f_2, sd = sd_2,
  lb = samp_t1, ub = 1
)
# calculate Weibull parameters
beta_sample <- (fn(samp_t2) - fn(samp_t1)) / log(t_2 / t_1)
eta_sample <- exp(log(t_1) - (fn(samp_t1) / beta_sample))

p_joint_prior_post_comp <- idler_stan_fit %>%
  mcmc_scatter(pars = c("beta", "eta")) +
  geom_density_2d(
    data = data.frame(
      beta = beta_sample,
      eta = eta_sample
    ),
    aes(x = beta, y = eta),
    bins = 25
  ) +
  xlim(0, 10) +
  ylim(0, 3000) +
  xlab(expression(beta)) +
  ylab(expression(eta)) +
  theme_minimal()
# plot
p_joint_post
p_joint_prior_post_comp
```

```{r}
#| label: save-fig-posterior
#| echo: false
#| output: false
pdf(
  file.path(fig_path, "idler-frame-post.pdf"),
  height = 5,
  width = 10
)
plot_grid(
  p_joint_post,
  p_joint_prior_post_comp,
  nrow = 1,
  ncol = 2,
  labels = c(
    "(a)", "(b)"
  ),
  label_fontfamily = "Times",
  label_face = "plain"
)
dev.off()
```

@fig-posterior-cdf shows the coresponding posterior uncertainty in the CDF of the Weibull lifetime distribution. The uncertainty surounding the CDF is now much more precise than the prior in @fig-informative-prior.

```{r}
#| label: fig-posterior-cdf
#| fig-cap: "The posterior uncertainty about the CDF."
#| echo: false
# create plot of cdf
p_cdf_post <- PlotPostCDF(
  idler_stan_fit,
  x_range = x_range, res = 100
)
p_cdf_post
```

```{r}
#| label: save-fig-posterior-cdf
#| echo: false
#| output: false
pdf(
  file.path(fig_path, "idler-frame-post-CDF.pdf"),
  height = 5,
  width = 8
)
p_cdf_post
dev.off()
```

# Expected failure times

The posterior samples also provide draws of the imputed values of the censored lifetimes. Using these draws, I can obtain predictive draws for the remaining useful life (RUL) of the frames still in operation acording to $RUL_i = \tilde{y}_i - C_i$ where $C_i$ is the censoring time of the lifetime (or the current age of the frame). @fig-expected-FTs shows the predictive RUL distributions for each frame.

```{r}
#| label: fig-expected-FTs
#| fig-cap: "The RUL predictive distributions for the idler-framce still curently in opperation."
#| fig-subcap: 
#|   - "Frames 1-72."
#|   - "Frames 73-143."
#| echo: false
# get the posterior draws of the imputed lifetimes
rc_post <- idler_stan_fit %>%
  as_draws_rvars() %>%
  spread_rvars(y_rc_hat[i])
rc_post <- cbind(
  rc_post,
  df_rc
) %>%
  filter(
    end == lubridate::ymd("2021-01-11")
  ) %>%
  mutate(
    f_days = y_rc_hat - as.numeric(lifetime)
  )
lt_rc_post <- idler_stan_fit %>%
  as_draws_rvars() %>%
  spread_rvars(y_lt_rc_hat[i], t_lt_rc[i])
lt_rc_post <- cbind(
  lt_rc_post,
  df_lt_rc
) %>%
  filter(
    end == lubridate::ymd("2021-01-11")
  ) %>%
  mutate(
    f_days = y_lt_rc_hat - (t_lt_rc + as.numeric(lifetime))
  )
ft_units_under_test <- rbind(
  rc_post %>%
    select(start, end, lifetime, frame_number, f_days),
  lt_rc_post %>%
    select(start, end, lifetime, frame_number, f_days)
)
p1 <- ft_units_under_test %>%
  filter(frame_number %in% as.character(1:round(143 / 2))) %>%
  mutate(
    frame_number = factor(
      frame_number,
      levels = as.character(1:round(143 / 2))
    )
  ) %>%
  arrange(frame_number) %>%
  ggplot(aes(y = frame_number, xdist = f_days)) +
  stat_slab(height = 2, color = "black") +
  theme_minimal() +
  ylab("frame number") +
  xlab("RUL (days)")
p2 <- ft_units_under_test %>%
  filter(frame_number %in% as.character((round(143 / 2) + 1):143)) %>%
  mutate(
    frame_number = factor(
      frame_number,
      levels = as.character((round(143 / 2) + 1):143)
    )
  ) %>%
  arrange(frame_number) %>%
  ggplot(aes(y = frame_number, xdist = f_days)) +
  stat_slab(height = 2, color = "black") +
  theme_minimal() +
  ylab("frame number") +
  xlab("RUL (days)")
p1
p2
```

```{r}
#| label: save-fig-expected-FTs
#| echo: false
#| output: false
pdf(
  file.path(fig_path, "posterior-FTs.pdf"),
  height = 12,
  width = 10
)
plot_grid(p1, p2, nrow = 1, ncol = 2)
dev.off()
```

# Expected number of failures

Using the predictive draws of the RUL for each of the frames, I also construct a distribution for the cumulative failures going forward from the end of the observation period. I do this by ordering the predictive values of the frames for each draw and then creating a step function for the cumulative number of failures. Ten of these draws are shown in @fig-E-n-failures-draws.

```{r}
#| label: fig-E-n-failures-draws
#| fig-cap: "Ten example draws of the cumulative failures in days following the end of observation."
#| echo: false
# extract draws of the right censored lifetimes and filter to only those still
# under test
set.seed(549)
draws_rc_FTs <- idler_stan_fit %>%
  as_draws_df() %>%
  spread_draws(y_rc_hat[i]) %>%
  left_join(
    df_rc %>%
      mutate(i = 1:n()),
    by = "i"
  ) %>%
  filter(
    end == ymd("2021-01-11")
  ) %>%
  mutate(
    f_days = y_rc_hat - as.numeric(lifetime)
  ) %>%
  select(-c("y_rc_hat"))
draws_lt_rc_FTs <- idler_stan_fit %>%
  as_draws_df() %>%
  spread_draws(y_lt_rc_hat[i], t_lt_rc[i]) %>%
  left_join(
    df_lt_rc %>%
      mutate(i = 1:n()),
    by = "i"
  ) %>%
  filter(
    end == ymd("2021-01-11")
  ) %>%
  mutate(
    f_days = y_lt_rc_hat - (as.numeric(lifetime) + t_lt_rc)
  ) %>%
  select(-c("y_lt_rc_hat", "t_lt_rc"))
draws_FTs <- rbind(draws_rc_FTs, draws_lt_rc_FTs)
# choose a subset of draws for plot
sampel_draws <- sample(unique(draws_FTs$.draw), size = 10)
# plot the expected number of failures for each draw
p_E_n_failures <- draws_FTs %>%
  filter(.draw %in% sampel_draws) %>%
  group_by(.draw) %>%
  arrange(f_days) %>%
  mutate(n_failures = 1:n()) %>%
  ggplot() +
  geom_step(
    aes(x = f_days, y = n_failures, group = .draw),
    colour = "gray",
    alpha = 0.8
  ) +
  theme_minimal() +
  xlab("days") +
  ylab("number of failures")
p_E_n_failures
```

```{r}
#| label: save-fig-E-n-failures-draws
#| echo: false
#| output: false
pdf(
  file.path(fig_path, "E-n-failures-draws.pdf"),
  height = 5,
  width = 10
)
p_E_n_failures
dev.off()
```

From the distribution of step functions, I can calculate predictive distributions for the number of failures within the next 1, 3, and 6 months. @fig-E-n-failures-dists shows these predictive distributions.

```{r}
#| label: fig-E-n-failures-dists
#| fig-cap: "The expected number of failures in the next one (a), three (b), and six (c) months after the end of the observation period."
#| echo: false
# calculate the number of failures within 1, 3, and 6 months for each draw
E_failures <- draws_FTs %>%
  group_by(.draw) %>%
  summarise(
    n_failures_3m = sum(f_days < (1 * 31)),
    n_failures_6m = sum(f_days < (3 * 31)),
    n_failures_12m = sum(f_days < (6 * 31))
  )
# plot densities
p_E_n_failures_dens <- plot_grid(
  E_failures %>%
    ggplot() +
    geom_density(
      aes(n_failures_3m),
      fill = alpha("lightblue", 0.5),
      adjust = 2.5
    ) +
    xlim(0, 40) +
    ylim(0, 0.35) +
    xlab("number of failures") +
    theme_minimal(),
  E_failures %>%
    ggplot() +
    geom_density(
      aes(n_failures_6m),
      fill = alpha("lightblue", 0.5),
      adjust = 1.5
    ) +
    xlim(0, 40) +
    ylim(0, 0.35) +
    xlab("number of failures") +
    theme_minimal(),
  E_failures %>%
    ggplot() +
    geom_density(
      aes(n_failures_12m),
      fill = alpha("lightblue", 0.5),
      adjust = 1.5
    ) +
    xlim(0, 40) +
    ylim(0, 0.35) +
    xlab("number of failures") +
    theme_minimal(),
  nrow = 3, ncol = 1,
  labels = c(
    "(a)", "(b)", "(c)"
  ),
  label_fontfamily = "Times"
)
p_E_n_failures_dens
```

```{r}
#| label: save-fig-E-n-failures-dists
#| echo: false
#| output: false
pdf(
  file.path(fig_path, "E-n-failures-densities.pdf"),
  height = 10,
  width = 10
)
p_E_n_failures_dens
dev.off()
```

# Cost functions

The posterior draws can also be used to propogate the uncertainty in the analysis through utility functions, such as cost functions, that inform long term management decisions. Here I show an example of choosing a suitable fixed time interval to preventatively replace the idlers to avoid large unplanned maintenance costs and downtime. The details of the cost function are provided in Sec. 3.4.3 of the main thesis chapter and an explanation of the code is provided in Alg. 1 in the section.
Here I calculate the predictive distributions for fixed time replacement intervals every 1-44 shutdowns of the mine, these distributions are shown in @fig-cost-function.
```{r}
#| label: sim-expected-K-rm
rvar_pweibull <- rfun(pweibull)

CumulativeBeltFailures <- function(
  beta, eta,        # Weibull parameters
  N_units = 143,    # number of frames
  N_shuts = 44,     # the number of shutdowns to run sim for
  delta = (6 * 7),  # operation time between shuts
  N_runs = 1000,    # number of simulation runs
  P_rm = 0.05       # Probability of frame failure needing reactive maintenance
  ) {
  unit_ages_start <- rep(0, N_units * N_runs)
  K_uf <- array(rep(NA, N_shuts * N_runs), dim = c(N_shuts, N_runs))
  K_rm <- array(rep(NA, N_shuts * N_runs), dim = c(N_shuts, N_runs))
  for (shut in 1:N_shuts) {
    # Calculate age at end of production period
    unit_ages_end <- unit_ages_start + delta
    # Calculate probability of unit failing given its age
    P_uf <- (pweibull(unit_ages_end, beta, eta) -  pweibull(unit_ages_start, beta, eta)) /
      (1 - pweibull(unit_ages_start, beta, eta))
    # Simulate unit failurs
    failures <-  rbinom(
      n = N_units * N_runs,
      size = 1,
      prob = P_uf 
    ) %>%
    matrix(
      nrow = N_units,
      ncol = N_runs
    )
    # Put in matrix
    # apply sum
    K_uf[shut, ] <- failures %>%
      apply(FUN = sum, MARGIN = 2)
    # Simulate reactive maintenance
    K_rm[shut, ] <- rbinom(
      n = N_runs,
      size = K_uf[shut, ],
      prob = P_rm
    )
    # Update unit ages
    unit_ages_start <- unit_ages_end
    if(any(failures == 1)) unit_ages_start[as.logical(failures)] <- 0
  }
  K_rm %>%
    apply(FUN = cumsum, MARGIN = 2) %>%   # Take cumulative sum
    apply(FUN = mean, MARGIN = 1) %>%     # Calculate expected values
    return()
}
# extract draws for parameters from posterior
joint_draws <- idler_stan_fit %>%
  as_draws_df() %>%
  spread_draws(beta, eta)
# thin draws
subset_of_draws <- seq(1, nrow(joint_draws), 5)
# apply sim over draws of parameters
E_N_reactive_maintenance <- mapply(
  function(beta, eta) CumulativeBeltFailures(beta = beta, eta = eta),
  joint_draws$beta[subset_of_draws],
  joint_draws$eta[subset_of_draws]
)
```

```{r}
#| label: fig-cost-function
#| fig-cap: "The predictive distribution of cost per unit time for the diferent choices of fixed time replacement interval."
#| echo: false
CostFunction <- function(
  t_p,        # fixed time preplacement interval
  K_rm,        # expected reactive replacement in t_p
  N = 143,    # number of frames
  # (cost of replaceing planned idler replacement x number of idlers in frame)
  C_p = (250 * 3),
  # (tonnes/hour x hours X $/tonne + cost of reactive replacement)
  C_r = (15000 * 2 * 100 + 2000)  
) {
  preventative_cost <- C_p * N
  reactive_cost <- C_r * K_rm
  cost_per_unit_t <- (preventative_cost + reactive_cost) / t_p
  return(cost_per_unit_t)
}
# calculate draws of cost per unit time
E_N_failures_df <- data.frame(
  draw = rep(subset_of_draws, each = 44),
  shut = rep(1:44, length(subset_of_draws)),
  value = E_N_reactive_maintenance %>%
    as.numeric()
)
# plot predictive distributions
E_N_failures_df %>%
  filter(shut <= 44) %>%
  mutate(
    t_p = shut * (6 * 7),
    C = CostFunction(t_p = t_p, K_rm = value),
    weeks = factor(shut * 6, levels = (1:44 * 6), ordered = TRUE)
  ) %>%
  ggplot() +
  stat_halfeye(
    aes(y = weeks, x = C),
    .width = c(0.5, 0.9)
  ) +
  xlab("Cost per ($/day)") +
  ylab("Interval (weeks)") +
  theme_minimal()
```

```{r}
#| label: save-fig-cost-function
#| echo: false
#| output: false
pdf(
  file.path(fig_path, "cost-funciton.pdf"),
  height = 10,
  width = 8
)
E_N_failures_df %>%
  filter(shut <= 44) %>%
  mutate(
    t_p = shut * (6 * 7),
    C = CostFunction(t_p = t_p, K_rm = value),
    weeks = factor(shut * 6, levels = (1:44 * 6), ordered = TRUE)
  ) %>%
  ggplot() +
  stat_halfeye(
    aes(y = weeks, x = C),
    .width = c(0.5, 0.9)
  ) +
  xlab("Cost per ($/day)") +
  ylab("Interval (weeks)") +
  theme_minimal()
dev.off()
```

```{r}
#| label: tbl-cost-function
#| echo: false
#| output: false

E_N_failures_df %>%
  filter(shut <= 10) %>%
  mutate(
    t_p = shut * (6 * 7),
    C = CostFunction(t_p = t_p, K_rm = value),
    weeks = shut * 6
  ) %>%
  group_by(weeks) %>%
  summarise(
    "Mean" = mean(C),
    "5\\%" = quantile(C, 0.05),
    "25\\%" = quantile(C, 0.25),
    "50\\%" = quantile(C, 0.50),
    "75\\%" = quantile(C, 0.75),
    "95\\%" = quantile(C, 0.95),
    "$\\text{Pr}[< \\$15000]$" = sum(C < 15000) / n()
  ) %>%
  mutate(
    across(c('Mean':'95\\%'), ~ round(.x, 0)),
    across(
      c("$\\text{Pr}[< \\$15000]$"),
      ~ round(.x, 2)
    )
  ) %>%
  rename(
    "Interval (weeks)" = weeks
  ) %>%
  kbl(
    booktabs = T,
    format = "latex",
    caption = "Summary of predictive distributions of cost per unit time (in \\$/day).",
    escape = FALSE,
    label = "cost-per-unit-time"
  ) %>%
  kable_styling(latex_options = "striped") %>%
  save_kable(
    file = file.path(
      tbl_path,
      "cost-function-summary.tex"
    ),
    keep_tex = TRUE
  )
```